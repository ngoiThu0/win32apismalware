// scoket-server.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <winsock2.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ws2tcpip.h> 
#pragma comment(lib, "ws2_32.lib")

int main(int argc, char const** argv)
{
    //init socket
    WSADATA wsaData;
    int iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != NO_ERROR) {
        wprintf(L"WSAStartup function failed with error: %d\n", iResult);
        return 1;
    }

    //test htons, pton, ntop
	uint16_t test_case = 12;
    printf("%#x\n", test_case);
    unsigned short hn = htons(test_case);
	printf("%#x\n", hn);

    char* str_ptr = new char[20];
    struct sockaddr_in socket_in;
    //socket_in.sin_addr.s_addr = htonl(atoi("10.10.10.10"));
    //printf("%d::%d\n", strlen(str_ptr), socket_in.sin_addr.s_addr);
    //inet_ntop(AF_INET, &socket_in.sin_addr.s_addr, str_ptr, strlen(str_ptr));
    //printf("Test case1: %s\n", str_ptr);

    inet_pton(AF_INET, "127.8.8.68", &socket_in.sin_addr);
    inet_ntop(AF_INET, &socket_in.sin_addr, str_ptr, strlen(str_ptr));
    printf("Test case2: %s\n", str_ptr);

    //init
    SOCKET serverSocketfd;
    sockaddr_in serverAddr, clientAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(5555);
    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    

    // socket
    
    serverSocketfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (serverSocketfd == -1) {
        printf("Fail\n");
        exit(1);
    }
    else
        printf("Socket file descriptor: %d\n", serverSocketfd);

    // bind

    
    if (bind(serverSocketfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        printf("Fail bind!!!\n");
        exit(1);
    }
    else
        printf("Bound!!\n");



    //listen
    
    if (listen(serverSocketfd, 3) != 0) {
        printf("Fail listen: %d\n", WSAGetLastError());
        exit(1);
    }
        
    else
        printf("Listening...\n");

    //accept

    int clientLen = sizeof(clientAddr);
    SOCKET newSocket = accept(serverSocketfd, (struct sockaddr*)&clientAddr, &clientLen);
    if (newSocket == INVALID_SOCKET)
        printf("Invalid socket: %d\n", WSAGetLastError());
    else
        printf("Connect a socket success: %d\n", newSocket);


    //send and receive 
    const char* message = "xuanquang is the best~~";
    char sendbuf[1024];
    char* recbuf = new char[1024];
    int recBytes;
    //memset(sendbuf, 0, strlen(sendbuf));


    while (true) {
        recBytes = recv(newSocket, recbuf, strlen(recbuf), 0);
        recbuf[recBytes] = 0;
        printf("Client: %s\n", recbuf);
        fputs("Server: ", stdout);
        fgets(sendbuf, strlen(sendbuf), stdin);
        send(newSocket, sendbuf, strlen(sendbuf), 0);

    }
    
    
    if (send(newSocket, message, int(strlen(message)), 0) == SOCKET_ERROR) {
        printf("Fail send Message: %d", WSAGetLastError());
    }
    else
        printf("Send message success: %s", message);

    //close socket

    //addrinfo test 

    closesocket(newSocket);
    closesocket(serverSocketfd);

    WSACleanup();
	return 0;
}

