// ClientSocket.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <winsock2.h>
#include <WS2tcpip.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER_SIZE 1024

#pragma comment(lib, "ws2_32.lib")

VOID SocketClient();
VOID NamedPipeClient();
VOID MailslotsClient();
VOID FileMappingClient();


BOOL isResult;
const char* readBuf = new char[BUFFER_SIZE];
const char* writeBuf = new char[BUFFER_SIZE];
DWORD nBytes;

int main() {

	FileMappingClient();

	return 0;
}


//=======================================   SOCKET CLIENT   ===================================================================

VOID SocketClient() {
	// init socket
	WSADATA wsaData;
	int iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (iResult != NO_ERROR) {
		wprintf(L"WSAStartup function failed with error: %d\n", iResult);
		return;
	}

	//socket

	SOCKET clientFd;
	clientFd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (clientFd == -1) {
		printf("Fail create socket: %d\n", WSAGetLastError());
		exit(1);
	}
	else
		printf("Socket file descriptor: %d\n", clientFd);

	//connect

	struct sockaddr_in serverAddr;
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(5555);
	inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr);
	if (connect(clientFd, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
		printf("Fail connect to server: %d\n", WSAGetLastError());
		exit(1);
	}
	else
		printf("Success connect!!\n");

	//send and receive

	char sendBuf[1024];
	char* recBuf = new char[1024];
	int recBytes;
	//memset(recBuf, 0, strlen(recBuf));

	while (recBytes == 0) {
		fputs("Client: ", stdout);
		fgets(sendBuf, strlen(sendBuf), stdin);
		send(clientFd, sendBuf, strlen(sendBuf), 0);
		recBytes = recv(clientFd, recBuf, strlen(recBuf), 0);
		printf("Server: %s\n", recBuf);
	}

	printf("%d\n", strlen(recBuf));
	//int recBytes = recv(clientFd, recBuf, strlen(recBuf) - 1, 0);
	recBuf[recBytes] = 0;
	char xq[50] = "test string\ndhdhhdhdh";
	printf("%s\n", xq);
	printf("Message: %s\n", recBuf);

	closesocket(clientFd);

	WSACleanup();

}

//=======================================  NamedPipe Client   =================================================================

VOID NamedPipeClient() {

	HANDLE hNamedPipe = NULL;

	hNamedPipe = CreateFileW(L"\\\\.\\pipe\\medpipe", GENERIC_ALL, FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
		OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	if (hNamedPipe == INVALID_HANDLE_VALUE)
		printf("Fail CreateFileW for namedpipe: %d\n", GetLastError());
	else {
		memset((void*)readBuf, 0, BUFFER_SIZE);
		isResult = ReadFile(hNamedPipe, (LPVOID)readBuf, BUFFER_SIZE, &nBytes, NULL);
		if (isResult == FALSE)
			printf("Fail read data from named pipe: %d\n", GetLastError());
		else
			printf("Data read from named pipe server: %s\n", readBuf);
		memset((void*)writeBuf, 0, BUFFER_SIZE);
		fgets((char*)writeBuf, BUFFER_SIZE, stdin);
		isResult = WriteFile(hNamedPipe, writeBuf, BUFFER_SIZE, &nBytes, NULL);
		if (isResult = FALSE)
			printf("Fail write data to named pipe server: %d\n", GetLastError());
		else
			printf("Write data to named pipe server success!!!\n");
	}

}


//===============================   Mailslots   =========================================================================


VOID MailslotsClient() {
	HANDLE hMailslots = INVALID_HANDLE_VALUE;
	hMailslots = CreateFileW(L"\\\\.\\mailslot\\firstMailslot", GENERIC_ALL, FILE_SHARE_DELETE |
		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	if (hMailslots == INVALID_HANDLE_VALUE)
		printf("Fail CreateMailslots function: %d\n", GetLastError());
	else {
		while (true) {
			memset((void*)writeBuf, 0, BUFFER_SIZE);
			fputs("Get input: ", stdout);
			fgets((char*)writeBuf, BUFFER_SIZE, stdin);
			isResult = WriteFile(hMailslots, writeBuf, BUFFER_SIZE, &nBytes, NULL);
			if (!strcmp(writeBuf, "quit\n"))
				break;
			if (isResult == FALSE)
				printf("Fail write data to mailslot server: %d\n", GetLastError());
			else
				printf("Write data to mailslot server success!!!\n");
		}
	}
}


//============================================   File Mapping   =========================================================================
VOID FileMappingClient() {
	HANDLE hFileMapping = INVALID_HANDLE_VALUE;
	hFileMapping = OpenFileMappingW(FILE_MAP_ALL_ACCESS, FALSE, L"firstFileMapping"); 
	if (hFileMapping == INVALID_HANDLE_VALUE)
		printf("Fail open file mapping: %d\n", GetLastError());
	else {
		printf("OpenFileMapping success!!!\n");
	}
	memset((void*)readBuf, 0, BUFFER_SIZE);
	Sleep(10000);
	readBuf = (char*)MapViewOfFile(hFileMapping, FILE_MAP_ALL_ACCESS, 0, 0, 1024);
	if (readBuf == NULL)
		printf("Fail read data from file mapping server: %d\n", GetLastError());
	else {
		printf("Read data from file mapping server: %s\n", readBuf);
	}
}
